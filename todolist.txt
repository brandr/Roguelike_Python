
CURRENT MAIN GOALS:

ROBERT:

* Finish: 
	- Ranged combat system
		* how various objects collide with Beings
		* make arrows stack and decrement properly (as well as display count properly)

	- Select list pane
		-if there is no selectlist pane, item inventory doesn't wrap around the event pane.


NICK:

* Come up with a rough and tentative but very long and diverse list of actions and delay values.
	-In other words, the list should cover many possible actions, but the delay values will be
		very easy to change, so don't worry about making them exact.
* Make more flowcharts revolving around the inventory system and dropping/picking up items.
* need flowcharts about item identification/event/player knowledge 
	- i.e., what is actually happening and how in translates into what the player sees.
	- in the long run, this will include item identification, sounds, FOV, etc.

Things to do in order of precedence: 
(try to add things to the stage where they seem to fit in best)

STAGE 1	
		Throwing, Ammo and ranged weapons (this will change the combat system somewhat)
			* work on special cases for throwing
				- still need to make collision with monsters/players work
			* make arrows decrement properly
		Some basic hazards (like lava) to help figure out player movement and control contexts.
			* Consider adding other navigable features like walls and doors, as well as messages on-collision.
		
		Graphics system (like arrow moving across screen)
		Consider making inventories based on Dicts rather than lists, mapping letters to items.
			* this will allow removing the first item without changing the order of the rest.o

STAGE 2	(have to wait for Nick for this stuff and below.)
		Implement item stacks (will affect pickup, dropping, etc.)
			* some of the framework for this exists, but not enough to test yet.
			* will have to define "stack equivalence" between items somehow
			* Nick needs to tell me how mulitple-item stacks should be handled. Examples:
				- Arrows should be shown as:
					. arrows [18]
				- how to drop multiple items? In crawl, this would be done by starting a "drop"
					action, opening the inventory screen, typing in a number, pressing a letter
					to select the item that the player wants to drop that amount of, and then
					pressing Enter. Should we do this?
					- No. We oughta start a drop action, open the inventory screen, and typing in a letter.
						If that letter has multiple items associated with it, it should prompt for a number,
						and drop that amount of items when the number is given.
		Finish wielding/equipping basics. 
			* Remember that with the current system, equippables can also be wielded, but no item can be wielded and equipped at the same time.
			* Be careful with some contexts (trying to equip over already-equipped item, etc.)
			* Figure out how to relate dependent equipment like cloak and chest, shield and 2H weapon, etc. (be general)
		Continue setting up general equipment system, with a focus on how equipment actually affects its user. 
			*(plan ahead. Focus on armor and shields, but allow for amulets/rings/etc)
		Attacking/Dodging/blocking/armor mechanics
		More advanced combat (how do weapons/equipment change combat? What values should we abstract until later?)
		Make event pane scrollable

STAGE 3
		More complex Status effects 
			* implemented on a basic level with poison potions
			* need to develop into more complex cases, like stacking statuses
				- ex: what happens with multiple poison potions?
			* need to make statuses send messages when appropriate
		Typed damage like fire, ice, poison (may want to implement sooner)
		Player attributes (STR, DEX, etc.) (this will change combat system a little.)
		HP and MP regeneration
		Consider factors which might alter player move/attack speed, like burdening (need to implement item weight for this)
		Item enchantments
		Item brands
		Basic spell system (only need to make like 1 spell for testing purposes)
		Expand graphics to accomodate spell; try to plan ahead and be extensible

STAGE 4
		Traps
		Item identification system 	
			* begin the larger system of player view vs what is actually happening in the game.
			* IDEA: make an "event" system so that when a player or being "sends" an event, it
				is parsed based on the player's awareness.
				- consider how various events might translate to various messages -- consider an actor and an object, etc.,
					and remember that everything will be shown from the player's point of view.
			* Later this will affect FOV and the system by which the player receives messages about events. 
				-maybe they need to "reach" the player before they display, thereby channeling/filtering all events
					through the player's point of view/knowledge?
		"Searchable" tiles (hidden doors, traps, etc.)
		Signs that the player can read

STAGE 5
		Stairs, multiple levels, have to create a dungeon class (might create the dungeon class before this)
		Consider more tile types, like doors
		Make it easier to create monsters for testing (maybe focus on an editor context)
		Map editor (may benefit from some gui library)
		Beatitude
		Gold
... 

STAGE M - 2
		Food and hunger (expand upon monster corpses)
		Wands
		Branches
		Fully implement potions (can still add more potions, but the general system should be set up)
		Same for scrolls

STAGE M - 1
		Non-hostile monsters (will have to expand monster AI just slightly)
		Shopping?
		Pets?

STAGE M
		Spellbooks (expand magic system a bit)
		Player experience and leveling
		Special abilities
		Basic skill system (don't develop full tree yet, but figure out what a skill is and how it will be stored/processed)
		Player races/classes
		Monster classification (AI type, specices, etc.)
		Artifact items
		Unique monsters (how to store/create them? How might their values vary?)
...

STAGE N - 2
		Any remaining item types
		Level generation
		Item generation
		Monster generation
		Fully flesh out magic systems (how magic damage works, etc.)
        Final version of character creation (player stats can simply be hardcoded up to this point)
        Tertiary environmental attributes, like steam, wells, 

STAGE N - 1
		Sounds and monster awareness
		Complete Player and Monster FOV
        Fully flesh out monster AI (based on all facets of the game that will be available for monsters to interact with)
     	Highly independent systems, like gods, skill trees, some unique artifact systems, etc.
     	Ability to save the game to a file, and load a game from that file.

STAGE N 
		Final context of game launch. This includes the title screen, the version of the level editor we will release, etc.
        Actual game content: dungeon layout, unique levels/mosters/artifacts, setting up the values for gods/skills/monster spawing/level generation/item generation, etc.
	    Final tweaks and adjustments-- now entering the pure game design phase (changing values for balance, significant playtesting, etc.)
